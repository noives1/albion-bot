import json
import random
import asyncio
from mailbox import Message
from telegram import KeyboardButton, ReplyKeyboardMarkup
from typing import TextIO, Text
from aiogram import Bot, Dispatcher, types
from aiogram.filters import Command
import aiogram.types
from aiogram.utils.keyboard import ReplyKeyboardBuilder
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import StatesGroup, State


# –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è —Ä—É–ª–µ—Ç–∫–∏
class RouletteState(StatesGroup):
    waiting_for_bet = State()
    waiting_for_amount = State()

# –£–∫–∞–∂–∏—Ç–µ –≤–∞—à —Ç–æ–∫–µ–Ω Telegram-–±–æ—Ç–∞
TOKEN = "7831842273:AAFo70SfQ0_xkaFBlC4HC1IyMVlzxnH5JQI"
ADMIN_USERNAME = "noives2"  # –í–∞—à —é–∑–µ—Ä–Ω–µ–π–º –¥–ª—è –∞–¥–º–∏–Ω—Å–∫–∏—Ö –∫–æ–º–∞–Ω–¥
bot = Bot(token=TOKEN)
dp = Dispatcher(storage=MemoryStorage())

# –§–∞–π–ª –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
DATA_FILE = "users.json"


# –ó–∞–≥—Ä—É–∑–∫–∞ –∏–ª–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ñ–∞–π–ª–∞ JSON
def load_data():
    try:
        with open(DATA_FILE, "r") as file:
            return json.load(file)
    except FileNotFoundError:
        return {}


def save_data(data):
    file: TextIO
    with open(DATA_FILE, "w") as file:
        json.dump(data, file, indent=4)


# –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
users = load_data()


# –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –∏–∑ —Ñ–∞–π–ª–∞
def reload_data():
    global users
    users = load_data()


# –°–æ–∑–¥–∞–Ω–∏–µ —É–Ω–∏–∫–∞–ª—å–Ω–æ–≥–æ ID
def generate_unique_id():
    while True:
        user_id = random.randint(1000, 9999)
        if str(user_id) not in users:
            return user_id


# –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —á–∏—Å–µ–ª —Å —Ä–∞–∑–¥–µ–ª–µ–Ω–∏–µ–º —Ä–∞–∑—Ä—è–¥–æ–≤ —Ç–æ—á–∫–æ–π
def format_number(number):
    return f"{number:,.2f}".replace(",", " ").replace(".",
                                                      ",").replace(" ", ".")


# –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
def get_main_menu():
    builder = ReplyKeyboardBuilder()
    builder.row(
        aiogram.types.KeyboardButton(text="üìã –ú–æ–π ID"),
        aiogram.types.KeyboardButton(text="üí∏ –ü–æ–ø–æ–ª–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å"),
        aiogram.types.KeyboardButton(text="üìà –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –±–∞–ª–∞–Ω—Å"),
        aiogram.types.KeyboardButton(text="üí≥ –í—ã–≤–æ–¥ —Å—Ä–µ–¥—Å—Ç–≤")
    )
    builder.row(aiogram.types.KeyboardButton(text="üéÆ –ò–≥—Ä—ã"))  # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É "–ò–≥—Ä—ã"
    return builder.as_markup(resize_keyboard=True)



# –ú–µ–Ω—é –¥–ª—è —Ä–∞–∑–¥–µ–ª–∞ "–ò–≥—Ä—ã"
def get_games_menu():
    builder = ReplyKeyboardBuilder()
    builder.row(
        aiogram.types.KeyboardButton(text="üé∞ –†—É–ª–µ—Ç–∫–∞"),

    )
    builder.row(aiogram.types.KeyboardButton(text="üîô –ù–∞–∑–∞–¥ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"))
    return builder.as_markup(resize_keyboard=True)


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "üéÆ –ò–≥—Ä—ã"
@dp.message(lambda msg: msg.text == "üéÆ –ò–≥—Ä—ã")
async def games_menu_handler(message: types.Message, state=None):
    await message.answer("–í—ã –≤–æ—à–ª–∏ –≤ —Ä–∞–∑–¥–µ–ª –∏–≥—Ä.", reply_markup=get_games_menu())


# –ú–µ–Ω—é –¥–ª—è —Ä—É–ª–µ—Ç–∫–∏
def get_roulette_menu():
    builder = ReplyKeyboardBuilder()
    builder.row(
        aiogram.types.KeyboardButton(text="üî¥ –ö—Ä–∞—Å–Ω–æ–µ"),
        aiogram.types.KeyboardButton(text="‚ö´ –ß–µ—Ä–Ω–æ–µ"),
        aiogram.types.KeyboardButton(text="üü¢ –ó–µ–ª–µ–Ω–æ–µ")
    )
    builder.row(aiogram.types.KeyboardButton(text="üîô –ù–∞–∑–∞–¥ –≤ —Ä–∞–∑–¥–µ–ª –∏–≥—Ä"))
    return builder.as_markup(resize_keyboard=True)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–†—É–ª–µ—Ç–∫–∞"
@dp.message(lambda msg: msg.text == "üé∞ –†—É–ª–µ—Ç–∫–∞")
async def roulette_handler(message: types.Message):
    await message.answer(
        "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ —Ä—É–ª–µ—Ç–∫—É! üé°\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ, –Ω–∞ —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –ø–æ—Å—Ç–∞–≤–∏—Ç—å:\n\n"
        "üî¥ **–ö—Ä–∞—Å–Ω–æ–µ** ‚Äî –º–Ω–æ–∂–∏—Ç–µ–ª—å: 2x\n"
        "‚ö´ **–ß–µ—Ä–Ω–æ–µ** ‚Äî –º–Ω–æ–∂–∏—Ç–µ–ª—å: 2x\n"
        "üü¢ **–ó–µ–ª–µ–Ω–æ–µ** ‚Äî –º–Ω–æ–∂–∏—Ç–µ–ª—å: 14x\n",
        reply_markup=get_roulette_menu(),
        parse_mode="Markdown"  # –ò—Å–ø–æ–ª—å–∑—É–µ–º Markdown –¥–ª—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Ç–µ–∫—Å—Ç–∞
    )

@dp.message(lambda msg: msg.text == "üîô –ù–∞–∑–∞–¥ –≤ —Ä–∞–∑–¥–µ–ª –∏–≥—Ä")
async def back_to_games_handler(message: types.Message, state: FSMContext):
    # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ, –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –±—ã–ª –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ –≤–≤–æ–¥–∞
    await state.clear()
    await message.answer("–í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –≤ —Ä–∞–∑–¥–µ–ª –∏–≥—Ä.", reply_markup=get_games_menu())


# –ù–∞—á–∞–ª–æ –∏–≥—Ä—ã –≤ —Ä—É–ª–µ—Ç–∫—É
@dp.message(lambda msg: msg.text in ["üî¥ –ö—Ä–∞—Å–Ω–æ–µ", "‚ö´ –ß–µ—Ä–Ω–æ–µ", "üü¢ –ó–µ–ª–µ–Ω–æ–µ"])
async def choose_color_handler(message: types.Message, state: FSMContext):
    color_map = {"üî¥ –ö—Ä–∞—Å–Ω–æ–µ": "red", "‚ö´ –ß–µ—Ä–Ω–æ–µ": "black", "üü¢ –ó–µ–ª–µ–Ω–æ–µ": "green"}
    await state.update_data(color=color_map[message.text])  # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–π —Ü–≤–µ—Ç
    await state.set_state(RouletteState.waiting_for_amount)  # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–ª–µ–¥—É—é—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    await message.answer("–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É —Å—Ç–∞–≤–∫–∏ (–≤ —Å–µ—Ä–µ–±—Ä–µ):")


@dp.message(RouletteState.waiting_for_amount)
async def place_bet_handler(message: types.Message, state: FSMContext):
    reload_data()
    user_id = str(message.from_user.id)
    user_data = users.get(user_id)

    if not user_data:
        await message.answer("–û—à–∏–±–∫–∞: –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å —Å–Ω–æ–≤–∞ —Å –ø–æ–º–æ—â—å—é /start.")
        return

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–≤–æ–¥
    try:
        bet_amount = float(message.text.strip())
        if bet_amount <= 0:
            raise ValueError
    except ValueError:
        await message.answer("–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–µ —á–∏—Å–ª–æ.")
        return

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–∞–ª–∞–Ω—Å
    if user_data["balance"] < bet_amount:
        await message.answer("–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –Ω–∞ –±–∞–ª–∞–Ω—Å–µ –¥–ª—è —Å—Ç–∞–≤–∫–∏.")
        return

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ
    data = await state.get_data()
    color = data["color"]
    await state.update_data(bet=bet_amount)

    def format_number(number):
        """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —á–∏—Å–ª–æ —Å —Ä–∞–∑–¥–µ–ª–µ–Ω–∏–µ–º —Ç—ã—Å—è—á —Ç–æ—á–∫–∞–º–∏."""
        return "{:,.0f}".format(number).replace(",", ".")

    # –õ–æ–≥–∏–∫–∞ —Ä—É–ª–µ—Ç–∫–∏ —Å –∏–∑–º–µ–Ω–µ–Ω–Ω—ã–º–∏ –≤–µ—Å–∞–º–∏
    weights = {
        "red": 30 if color == "red" else 67.3,
        "black": 30 if color == "black" else 67.3,
        "green": 2.7
    }

    total_weight = weights["red"] + weights["black"] + weights["green"]
    normalized_weights = [weights["red"] / total_weight, weights["black"] / total_weight,
                          weights["green"] / total_weight]

    result = random.choices(
        ["red", "black", "green"],
        weights=normalized_weights,
        k=1
    )[0]
    payout_multiplier = {"red": 2, "black": 2, "green": 14}

    if color == result:
        winnings = bet_amount * payout_multiplier[result]
        user_data["balance"] += winnings - bet_amount
        save_data(users)
        await message.answer(
            f"–†—É–ª–µ—Ç–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–∏–ª–∞—Å—å –Ω–∞ {result}! üéâ –í—ã –≤—ã–∏–≥—Ä–∞–ª–∏ {format_number(winnings)} —Å–µ—Ä–µ–±—Ä–∞.\n"
            f"–í–∞—à –Ω–æ–≤—ã–π –±–∞–ª–∞–Ω—Å: {format_number(user_data['balance'])}",
            reply_markup=get_roulette_menu()
        )
    else:
        user_data["balance"] -= bet_amount
        save_data(users)
        await message.answer(
            f"–†—É–ª–µ—Ç–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–∏–ª–∞—Å—å –Ω–∞ {result}. üòî –í—ã –ø—Ä–æ–∏–≥—Ä–∞–ª–∏ {format_number(bet_amount)} —Å–µ—Ä–µ–±—Ä–∞.\n"
            f"–í–∞—à –Ω–æ–≤—ã–π –±–∞–ª–∞–Ω—Å: {format_number(user_data['balance'])}",
            reply_markup=get_roulette_menu()
        )

    await state.clear()


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–Ω–æ–ø–∫–∏ "üîô –ù–∞–∑–∞–¥ –≤ —Ä–∞–∑–¥–µ–ª –∏–≥—Ä"
@dp.message(lambda msg: msg.text == "üîô –ù–∞–∑–∞–¥ –≤ —Ä–∞–∑–¥–µ–ª –∏–≥—Ä")
async def back_to_games_handler(message: types.Message):
    await message.answer("–í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –≤ —Ä–∞–∑–¥–µ–ª –∏–≥—Ä.", reply_markup=get_games_menu())



# –ú–µ–Ω—é —Å –∫–Ω–æ–ø–∫–æ–π "–ù–∞–∑–∞–¥"
def get_back_menu():
    builder = ReplyKeyboardBuilder()
    builder.row(aiogram.types.KeyboardButton(text="üîô –ù–∞–∑–∞–¥ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"))
    return builder.as_markup(resize_keyboard=True)


# –ú–µ–Ω—é –¥–ª—è –ø–µ—Ä–≤–æ–≥–æ –≤—Ö–æ–¥–∞
def get_first_time_menu():
    builder = ReplyKeyboardBuilder()
    builder.row(aiogram.types.KeyboardButton(text="üí∏ –ü–æ–ø–æ–ª–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å"))
    return builder.as_markup(resize_keyboard=True)


# –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
WELCOME_MESSAGE = """–ü—Ä–∏–≤–µ—Ç! üëã

–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –Ω–∞—à –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–æ–Ω–Ω—ã–π –±–æ—Ç! üí∞

–ó–¥–µ—Å—å —Ç—ã –º–æ–∂–µ—à—å:
‚úÖ –ò–Ω–≤–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å —Å–≤–æ—ë —Å–µ—Ä–µ–±—Ä–æ –∏ –ø–æ–ª—É—á–∞—Ç—å 15% –ø—Ä–∏—Ä–æ—Å—Ç–∞ –≤ –º–µ—Å—è—Ü.
‚úÖ –°–ª–µ–¥–∏—Ç—å –∑–∞ —Å–æ—Å—Ç–æ—è–Ω–∏–µ–º —Å–≤–æ–µ–≥–æ –±–∞–ª–∞–Ω—Å–∞ –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏ (–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–∞–∂–¥—É—é –º–∏–Ω—É—Ç—É).
‚úÖ –í—Å–µ–≥–¥–∞ –±—ã—Ç—å –Ω–∞ —Å–≤—è–∑–∏ —Å —Å–æ–∑–¥–∞—Ç–µ–ª–µ–º –±–æ—Ç–∞ –¥–ª—è –≤–æ–ø—Ä–æ—Å–æ–≤ –∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π.

–ï—Å–ª–∏ —É —Ç–µ–±—è –µ—Å—Ç—å —Å–µ—Ä–µ–±—Ä–æ, –∏ —Ç—ã –Ω–µ —Ö–æ—á–µ—à—å –µ–≥–æ –ø–æ—Ç–µ—Ä—è—Ç—å, —Å–¥–µ–ª–∞–π —à–∞–≥ –Ω–∞–≤—Å—Ç—Ä–µ—á—É —Å—Ç–∞–±–∏–ª—å–Ω–æ–º—É –ø—Ä–∏—Ä–æ—Å—Ç—É ‚Äì –∏–Ω–≤–µ—Å—Ç–∏—Ä—É–π –≤ –Ω–∞—à –±–∞–Ω–∫! üöÄ

–ñ–º–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ –∏ –Ω–∞—á–Ω–∏ –ø—Ä–∏—É–º–Ω–æ–∂–∞—Ç—å —Å–≤–æ—ë —Å–µ—Ä–µ–±—Ä–æ —É–∂–µ —Å–µ–≥–æ–¥–Ω—è! üíé"""


# –ö–æ–º–∞–Ω–¥–∞ /start
@dp.message(Command("start"))
async def start_handler(message: types.Message):
    reload_data()  # –ó–∞–≥—Ä—É–∂–∞–µ–º –∞–∫—Ç—É–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
    user_id = str(message.from_user.id)
    if user_id not in users:
        unique_id = generate_unique_id()
        users[user_id] = {
            "tg_username": message.from_user.username,
            "balance": 0,
            "unique_id": unique_id,
            "is_first_time": True  # –§–ª–∞–≥ –ø–µ—Ä–≤–æ–≥–æ –≤—Ö–æ–¥–∞
        }
        save_data(users)

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        await message.answer(WELCOME_MESSAGE,
                             reply_markup=get_first_time_menu())
        await asyncio.sleep(1)  # –ó–∞–¥–µ—Ä–∂–∫–∞ –ø–µ—Ä–µ–¥ –æ—Ç–ø—Ä–∞–≤–∫–æ–π —Å–ª–µ–¥—É—é—â–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
        await message.answer(
            f"–í–∞—à —É–Ω–∏–∫–∞–ª—å–Ω—ã–π ID: {unique_id}\n"
            f"–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –µ–≥–æ –¥–ª—è –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞.",
            reply_markup=get_main_menu())
    else:
        if users[user_id].get("is_first_time", False):
            users[user_id]["is_first_time"] = False
            save_data(users)

        await message.answer("–í—ã —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã!",
                             reply_markup=get_main_menu())


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–Ω–æ–ø–æ–∫
@dp.message(lambda msg: msg.text == "üìã –ú–æ–π ID")
async def my_id_handler(message: types.Message):
    reload_data()
    user_id = str(message.from_user.id)
    if user_id in users:
        unique_id = users[user_id]["unique_id"]
        await message.answer(f"–í–∞—à —É–Ω–∏–∫–∞–ª—å–Ω—ã–π ID: {unique_id}",
                             reply_markup=get_back_menu())
    else:
        await message.answer(
            "–í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã. –ù–∞–∂–º–∏—Ç–µ /start –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏.")


@dp.message(lambda msg: msg.text == "üí∏ –ü–æ–ø–æ–ª–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å")
async def deposit_handler(message: types.Message):
    await message.answer(
        "–î–ª—è –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞ –Ω–∞–ø–∏—à–∏—Ç–µ —Å—é–¥–∞: @noives2\n"
        "–û–±—è–∑–∞—Ç–µ–ª—å–Ω–æ —É–∫–∞–∂–∏—Ç–µ –≤–∞—à —É–Ω–∏–∫–∞–ª—å–Ω—ã–π ID.",
        reply_markup=get_back_menu())


@dp.message(lambda msg: msg.text == "üìà –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –±–∞–ª–∞–Ω—Å")
async def check_balance_handler(message: types.Message):
    reload_data()
    user_id = str(message.from_user.id)
    if user_id in users:
        balance = users[user_id]["balance"]
        formatted_balance = format_number(balance)
        await message.answer(
            f"–í–∞—à —Ç–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å: {formatted_balance} —Å–µ—Ä–µ–±—Ä–∞.",
            reply_markup=get_back_menu())
    else:
        await message.answer(
            "–í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã. –ù–∞–∂–º–∏—Ç–µ /start –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏.")


@dp.message(lambda msg: msg.text == "üí≥ –í—ã–≤–æ–¥ —Å—Ä–µ–¥—Å—Ç–≤")
async def withdraw_handler(message: types.Message):
    await message.answer(
        "–î–ª—è –≤—ã–≤–æ–¥–∞ —Å—Ä–µ–¥—Å—Ç–≤ –Ω–∞–ø–∏—à–∏—Ç–µ —Å—é–¥–∞: @noives2\n"
        "–û–±—è–∑–∞—Ç–µ–ª—å–Ω–æ —É–∫–∞–∂–∏—Ç–µ –≤–∞—à —É–Ω–∏–∫–∞–ª—å–Ω—ã–π ID –∏ —Å—É–º–º—É –¥–ª—è –≤—ã–≤–æ–¥–∞.",
        reply_markup=get_back_menu())


@dp.message(lambda msg: msg.text == "üîô –ù–∞–∑–∞–¥ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")
async def back_to_main_menu_handler(message: types.Message):
    await message.answer("–í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.",
                         reply_markup=get_main_menu())


# –ö–æ–º–∞–Ω–¥—ã /invest –∏ /remove –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–æ–º
@dp.message(Command("invest"))
async def invest_handler(message: types.Message):
    reload_data()
    if message.from_user.username != ADMIN_USERNAME:
        await message.answer("–≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.")
        return

    args = message.text.split()
    if len(args) != 3:
        await message.answer("–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ: /invest —Å—É–º–º–∞ ID")
        return

    try:
        sum_to_add = float(args[1])
        unique_id = args[2]
    except ValueError:
        await message.answer("–û—à–∏–±–∫–∞! –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ —Å—É–º–º–∞ –≤–≤–µ–¥–µ–Ω–∞ —á–∏—Å–ª–æ–º.")
        return

    for user_id, data in users.items():
        if str(data["unique_id"]) == unique_id:
            data["balance"] += sum_to_add
            save_data(users)
            formatted_balance = format_number(data["balance"])
            await message.answer(
                f"–ë–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å ID {unique_id} –ø–æ–ø–æ–ª–Ω–µ–Ω. –ù–æ–≤—ã–π –±–∞–ª–∞–Ω—Å: {formatted_balance} —Å–µ—Ä–µ–±—Ä–∞."
            )
            return

    await message.answer("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ç–∞–∫–∏–º ID –Ω–µ –Ω–∞–π–¥–µ–Ω.")


@dp.message(Command("remove"))
async def remove_handler(message: types.Message):
    reload_data()
    if message.from_user.username != ADMIN_USERNAME:
        await message.answer("–≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.")
        return

    args = message.text.split()
    if len(args) != 3:
        await message.answer("–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ: /remove —Å—É–º–º–∞ ID")
        return

    try:
        sum_to_remove = float(args[1])
        unique_id = args[2]
    except ValueError:
        await message.answer("–û—à–∏–±–∫–∞! –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ —Å—É–º–º–∞ –≤–≤–µ–¥–µ–Ω–∞ —á–∏—Å–ª–æ–º.")
        return

    for user_id, data in users.items():
        if str(data["unique_id"]) == unique_id:
            if data["balance"] < sum_to_remove:
                await message.answer(
                    f"–û—à–∏–±–∫–∞: –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤. –ë–∞–ª–∞–Ω—Å: {format_number(data['balance'])}."
                )
                return

            data["balance"] -= sum_to_remove
            save_data(users)
            formatted_balance = format_number(data["balance"])
            await message.answer(
                f"–° –±–∞–ª–∞–Ω—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å ID {unique_id} —Å–Ω—è—Ç–æ {format_number(sum_to_remove)} —Å–µ—Ä–µ–±—Ä–∞. –ù–æ–≤—ã–π –±–∞–ª–∞–Ω—Å: {formatted_balance}."
            )
            return

    await message.answer("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ç–∞–∫–∏–º ID –Ω–µ –Ω–∞–π–¥–µ–Ω.")


# –§–æ–Ω–æ–≤–∞—è –∑–∞–¥–∞—á–∞ –Ω–∞—á–∏—Å–ª–µ–Ω–∏—è –ø—Ä–æ—Ü–µ–Ω—Ç–æ–≤
async def update_balances():
    while True:
        reload_data()
        for user_id, data in users.items():
            if data["balance"] > 0:
                data["balance"] += data["balance"] * 0.000035
        save_data(users)
        await asyncio.sleep(60)


# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
async def main():
    asyncio.create_task(update_balances())
    print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω!")
    await dp.start_polling(bot)


if __name__ == "__main__":
    asyncio.run(main())
